// namespace AccessControlAPI.Models
// {
//     public class User
//     {
//         public int Id { get; set; }
//         public string Username { get; set; } = null!;
//         public string PasswordHash { get; set; } = null!;
//         public string Role { get; set; } = "User";
//     }
// }


// namespace AccessControlAPI.Models
// {
//     public class Device
//     {
//         public int Id { get; set; }
//         public string Name { get; set; } = null!;
//         public string SerialNumber { get; set; } = null!;
//     }
// }


// using Microsoft.EntityFrameworkCore;
// using AccessControlAPI.Models;

// namespace AccessControlAPI.Data
// {
//     public class AppDbContext : DbContext
//     {
//         public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

//         public DbSet<User> Users { get; set; } = null!;
//         public DbSet<Device> Devices { get; set; } = null!;
//     }
// }


// using AccessControlAPI.Data;
// using Microsoft.EntityFrameworkCore;

// var builder = WebApplication.CreateBuilder(args);

// builder.Services.AddDbContext<AppDbContext>(options =>
//     options.UseSqlite("Data Source=accesscontrol.db"));

// builder.Services.AddControllers();
// builder.Services.AddEndpointsApiExplorer();
// builder.Services.AddSwaggerGen();

// var app = builder.Build();

// if (app.Environment.IsDevelopment())
// {
//     app.UseSwagger();
//     app.UseSwaggerUI();
// }

// app.UseHttpsRedirection();
// app.UseAuthorization();

// app.MapControllers();

// app.Run();



// using Microsoft.AspNetCore.Mvc;
// using AccessControlAPI.Data;
// using AccessControlAPI.Models;
// using Microsoft.EntityFrameworkCore;

// namespace AccessControlAPI.Controllers
// {
//     [ApiController]
//     [Route("api/[controller]")]
//     public class UsersController : ControllerBase
//     {
//         private readonly AppDbContext _context;

//         public UsersController(AppDbContext context)
//         {
//             _context = context;
//         }

//         [HttpGet]
//         public async Task<ActionResult<IEnumerable<User>>> GetUsers()
//         {
//             return await _context.Users.ToListAsync();
//         }

//         [HttpPost]
//         public async Task<ActionResult<User>> CreateUser(User user)
//         {
//             _context.Users.Add(user);
//             await _context.SaveChangesAsync();

//             return CreatedAtAction(nameof(GetUsers), new { id = user.Id }, user);
//         }
//     }
// }

// dotnet tool install --global dotnet-ef
// dotnet ef migrations add InitialCreate
// dotnet ef database update
// dotnet run

// dotnet nuget locals all --clear
// dotnet restore
// dotnet add package Microsoft.EntityFrameworkCore.Sqlite

dotnet script archivo.cs
dotnet tool install -g dotnet-script
